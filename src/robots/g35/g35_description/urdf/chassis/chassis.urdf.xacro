<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="rc_chassis">

  <!-- Launch-Defined Parameters -->
    <xacro:arg name="nsp" default="/"/>
    <xacro:arg name="tf_prefix" default=""/>

 <!-- Add the parameters file -->
 <xacro:include filename="$(find g35_description)/urdf/chassis/parameters.urdf.xacro"/>




  <!-- Inertia of a solid cuboid. Width is measured along the x axis, depth
       along the y axis, and height along the z axis. -->
  <xacro:macro name="solid_cuboid_inertial"
               params="width depth height mass *origin">
    <inertial>
      <mass value="${mass}"/>
      <xacro:insert_block name="origin" />
      <inertia ixx="${mass * (depth * depth + height * height) / 12}"
               ixy="0" ixz="0"
               iyy="${mass * (width * width + height * height) / 12}"
               iyz="0"
               izz="${mass * (width * width + depth * depth) / 12}"/>
    </inertial>
  </xacro:macro>

  <!-- Inertia of a thick-walled cylindrical tube with open ends. Height is
       measured along the z axis, which is the tube's axis. inner_rad and
       outer_rad are the tube's inner and outer radii, respectively. -->
  <xacro:macro name="thick_walled_tube_inertial"
               params="inner_rad outer_rad height mass *origin">
    <inertial>
      <xacro:insert_block name="origin" />
      <mass value="${mass}"/>
      <inertia ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               ixy="0" ixz="0"
               iyy="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               iyz="0"
               izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"/>
    </inertial>
  </xacro:macro>

  <!-- Used for fixing robot to Gazebo 'base_link' -->
  <!-- <link name="world"/> -->

  <!-- base_link must have geometry so that its axes can be displayed in
       rviz. -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="0.01 0.01 0.01"/>
      </geometry>
      <material name="chassis_mat"/>
    </visual>
  </link>
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>


  <!-- chassis-->
    <link name="chassis">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${chassis_L} ${chassis_W} ${chassis_H}"/>
        </geometry>
        <material name="tire_mat"/>
      </visual>

      <visual>
        <origin xyz="0.05 0 -0.5" rpy="0 0 0"/>
        <geometry>
          <mesh filename="package://g35_description/meshes/body_2004_Infiniti_G35_Sedan.dae" />
        </geometry>
      </visual>

      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${chassis_L} ${chassis_W} ${chassis_H}"/>
        </geometry>
      </collision>

      <xacro:solid_cuboid_inertial
          width="${chassis_L}" depth="${chassis_W}"
          height="${chassis_H}" mass="${chassis_M}">
          <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:solid_cuboid_inertial>
    </link>


  <joint name="base_link_to_chassis" type="fixed">
    <parent link="base_link"/>
    <child link="chassis"/>
  </joint>

  <!-- chassis-->
    <!-- <link name="chassis2">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${chassis_L} ${chassis_W} ${chassis_H}"/>
        </geometry>
        <material name="tire_mat"/>
      </visual>


      <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
          <box size="${chassis_L} ${chassis_W} ${chassis_H}"/>
        </geometry>
      </collision>

      <xacro:solid_cuboid_inertial
          width="${chassis_L}" depth="${chassis_W}"
          height="${chassis_H}" mass="100">
          <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:solid_cuboid_inertial>
    </link>

    <joint name="base_link_to_chassis2" type="fixed">
      <parent link="base_link"/>
      <child link="chassis2"/>
      <origin xyz="0 0 0.5"/>
    </joint> -->

  <!-- <joint name="world_to_chassis_joint" type="fixed">
    <parent link="world"/>
    <child link="base_link"/>
    <origin xyz="0 0 2" />
  </joint> -->



  <!-- <link name="visual_link">
    <visual name="color_visual">
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="1 1 1"/>
      </geometry>
    </visual>
  </link> -->


  <!-- <link name="visual_link">
    <collision name="collision">
      <geometry>
          <cylinder radius="1" length="1"/>
      </geometry>
    </collision>
    <visual name="blink_visual">
      <geometry>
        <cylinder radius="1" length="1"/>
      </geometry>
    </visual>
  </link>

  <gazebo reference="blink_visual">
    <plugin name="blink" filename="libBlinkVisualPlugin.so">
      <color_a>0 0 1 1</color_a>
      <color_b>1 1 1 1</color_b>
      <period>0.4</period>
      <use_wall_time>true</use_wall_time>
    </plugin>
  </gazebo> -->

  <!-- <joint name="visual_link_to_chassis" type="fixed">
    <parent link="chassis"/>
    <child link="visual_link"/>
    <origin xyz="0 0 2" rpy="0 0 0" />
  </joint> -->


 <xacro:include filename="$(find g35_description)/urdf/chassis/front_axle.urdf.xacro"/>

 <xacro:include filename="$(find g35_description)/urdf/chassis/rear_axle.urdf.xacro"/>

 <!-- VLP-16 LIDAR -->
 <!-- <joint name="velodyne_link_to_chassis" type="fixed" >
  <parent link="chassis" />
   <child link="vlp_base_link" />
   <origin xyz="0 0 1.20" rpy="0 0 0" />
 </joint>
 <link name="vlp_base_link" >
   <visual>
     <geometry>
       <box size="0.1 0.1 0.1" />
     </geometry>
   </visual>
   <collision>
     <geometry>
       <box size="0.1 0.1 0.1" />
     </geometry>
   </collision>
   <inertial>
     <origin xyz="0 0 0"/>
     <mass value="1"/>
     <inertia ixx="3.0" ixy="0.0" ixz="0.0"
              iyy="3.0" iyz="0.0"
              izz="3.0" />
   </inertial>
 </link> -->

 <xacro:include filename="$(find g35_description)/urdf/velodyne/VLP-16_sampled.urdf.xacro"/>
 <VLP-16_sampled parent="chassis" name="velodyne" topic="velodyne_points">
   <origin xyz="-0.5 0 1.1" rpy="0 0 0" />
 </VLP-16_sampled>

 <!-- <xacro:include filename="$(find rc_car_description)/urdf/xv11/xv11.urdf.xacro"/>
 <XV-11 parent="chassis" name="xv11" topic="/xv11_laserscan">
   <origin xyz="0 0 ${chassis_H / 2 + 0.01}" rpy="0 0 0" />
 </XV-11> -->

 <!-- <xacro:include filename="$(find rc_car_description)/urdf/xv11/xv11_gpu.urdf.xacro"/>
 <XV-11_GPU parent="chassis" name="xv11" topic="/xv11_laserscan">
   <origin xyz="0 0 ${chassis_H / 2 + 0.04}" rpy="0 0 0" />
 </XV-11_GPU> -->

 <!-- Camera -->
 <!-- <xacro:include filename="$(find rc_car_description)/urdf/camera/camera.urdf.xacro"/>
 <driver_camera parent="chassis" name="camera_front" topic="/camera">
   <origin xyz="0 0 0.06" rpy="0 0 0" />
 </driver_camera> -->

 <!-- GPS -->
 <xacro:include filename="$(find g35_description)/urdf/gps/gps.urdf.xacro"/>
 <gps parent="chassis" name="gps" topic="/gps">
   <origin xyz="-0.5 0 1.2" rpy="0 0 0" />
 </gps>

 <!-- IMU -->
 <xacro:include filename="$(find g35_description)/urdf/imu/imu.urdf.xacro"/>
 <imu parent="chassis" name="imu" topic="/imu">
   <origin xyz="0 0 0.10" rpy="0 0 0" />
 </imu>

 <!-- IMU -->
 <!-- <xacro:include filename="$(find prowler_vehicle_description)/urdf/magnetometer/magnetometer.urdf.xacro"/>
 <magnetometer parent="chassis" name="magnetometer" topic="/magnetometer">
   <origin xyz="-2 0 1" rpy="0 0 0" />
 </magnetometer> -->

 <!-- Ground Truth -->
 <!-- <xacro:include filename="$(find prowler_vehicle_description)/urdf/ground_truth/ground_truth.urdf.xacro"/>
 <ground_truth parent="chassis" name="ground_truth" topic="/magnetometer">
   <origin xyz="-2 0 1" rpy="0 0 0" />
 </ground_truth> -->

<!-- gazebo_ros_control plugin -->
  <gazebo>
    <plugin name="gazebo_ros_test_control" filename="libgazebo_ros_g35.so">
      <robotNamespace>$(arg nsp)</robotNamespace>
      <tfPrefix>$(arg tf_prefix)</tfPrefix>

      <wheelBase>${wheelbase}</wheelBase>
      <axleWidth>${front_axle_W}</axleWidth>
      <wheelRadius>${wheel_front_R}</wheelRadius>

      <!-- <accelPID>10 0 0</accelPID>
      <coastPID>10 0 0</coastPID>
      <brakePID>100 0 0</brakePID>
      <maxTorque>1296</maxTorque>
      <maxVelocity>300</maxVelocity>
      <wheelFriction>0.2</wheelFriction>
      <launchControl>false</launchControl>

      <steeringPID>50 0 1</steeringPID>
      <steeringImax>100</steeringImax>
      <steeringVelPID>1 0 0</steeringVelPID>
      <steeringVelImax>100</steeringVelImax>
      <steeringVelMax>10</steeringVelMax>
      <steeringTorque>1000</steeringTorque>
      <steeringAngle>0.785</steeringAngle>
      <steeringFriction>0.2</steeringFriction>

      <suspensionPID>37479 0 600</suspensionPID>
      <suspensionMaxForce>37479</suspensionMaxForce>
      <suspensionMaxVelocity>1000</suspensionMaxVelocity>
      <suspensionHighStop>0.5</suspensionHighStop> -->

    </plugin>

    <!-- <plugin name="gazebo_ackermann_drive" filename="libgazebo_ros_ackermann_drive.so">
      <commandTopic>ackermann_cmd</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <wheelSeparation>0.15</wheelSeparation>
      <wheelDiameter>0.08</wheelDiameter>
      <wheelAcceleration>0.0</wheelAcceleration>
      <wheelTorque>5.0</wheelTorque>
      <updateRate>100</updateRate>
      <odometrySource>encoder</odometrySource>
      <leftDriveJoint>left_rear_axle</leftDriveJoint>
      <rightDriveJoint>right_rear_axle</rightDriveJoint>
      <leftSteerJoint>left_steering_joint</leftSteerJoint>
      <rightSteerJoint>right_steering_joint</rightSteerJoint>
      <publishTf>true</publishTf>
    </plugin> -->

      <plugin name="joint_state_publisher_rear" filename="libgazebo_ros_joint_state_publisher.so">
        <jointName>left_front_axle, right_front_axle, left_rear_axle, right_rear_axle, left_front_shock, right_front_shock, left_rear_shock, right_rear_shock, left_steering_joint, right_steering_joint</jointName>
        <robotNamespace>$(arg nsp)</robotNamespace>
        <updateRate>100</updateRate>

      </plugin>

  </gazebo>


</robot>
